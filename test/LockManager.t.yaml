LockManagerTest:
  - given: Deploying the contract
    and:
      - when: Constructor has invalid unlock mode
        then:
          - it: Should revert
      - when: Constructor with valid params
        then:
          - it: Registers the DAO address
          - it: Stores the given settings
          - it: Stores the given plugin and token addresses

  - when: calling updateSettings
    and:
      - when: updateSettings without the permission
        then:
          - it: should revert
      - when: updateSettings with the permission
        then:
          - it: should update the mode
      - when: Calling getSettings
        then:
          - it: Should return the right value

  - when: calling supportsInterface
    then:
      - it: does not support the empty interface
      - it: supports IERC165Upgradeable
      - it: supports ILockManager

  # Locking and voting calls

  - given: No locked tokens
    and:
      - given: No token allowance [no locked]
        and:
          - when: Calling lock() 1
            then:
              - it: Should revert
          - when: Calling lockAndVote() 1
            then:
              - it: Should revert
          - when: Calling vote() 1
            then:
              - it: Should revert
      - given: With token allowance [no locked]
        and:
          - when: Calling lock() 2
            then:
              - it: Should allow any token holder to lock
              - it: Should approve with the full token balance
          - when: Calling lockAndVote() 2
            then:
              - it: Should allow any token holder to lock
              - it: Should approve with the full token balance
              - it: The allocated token balance should have the full new balance
          - when: Calling vote() 2
            then:
              - it: Should revert

  - given: Locked tokens
    and:
      - given: No token allowance [some locked]
        and:
          - when: Calling lock() 3
            then:
              - it: Should revert
          - when: Calling lockAndVote() 3
            then:
              - it: Should revert
          - when: Calling vote() [same balance] 3
            then:
              - it: Should revert
          - when: Calling vote() [more locked balance] 3
            then:
              - it: Should approve with the full token balance
      - given: With token allowance [some locked]
        and:
          - when: Calling lock() 4
            then:
              - it: Should allow any token holder to lock
              - it: Should approve with the full token balance
              - it: Should increase the locked amount
          - when: Calling lockAndVote() [no prior votes] 4
            then:
              - it: Should allow any token holder to lock
              - it: Should approve with the full token balance
              - it: Should increase the locked amount
              - it: The allocated token balance should have the full new balance
          - when: Calling lockAndVote() [with prior votes] 4
            then:
              - it: Should allow any token holder to lock
              - it: Should approve with the full token balance
              - it: Should increase the locked amount
              - it: The allocated token balance should have the full new balance
          - when: Calling vote() [same balance] 4
            then:
              - it: Should revert
          - when: Calling vote() [more locked balance] 4
            then:
              - it: Should approve with the full token balance

  # Invalid config's

  - given: Calling lock() or lockToVote()
    then:
      - given: Invalid plugin
        and:
          - it: Locking and voting should revert
      - given: Invalid token
        and:
          - it: Locking should revert
          - it: Locking and voting should revert
          - it: Voting should revert

  - given: ProposalEnded is called
    and:
      - when: The caller is not the plugin
        then:
          - it: Should revert
      - when: The caller is the plugin
        then:
          - it: Removes the proposal ID from the list of known proposals

  # Calling unlock
  - given: Strict mode is set
    and:
      - given: Didn't lock anything [strict]
        and:
          - when: Trying to unlock [1 strict]
            then:
              - it: Should do nothing
      - given: Locked but didn't vote anywhere [strict]
        then:
          - when: Trying to unlock [2 strict]
            then:
              - it: Should unlock and refund the full amount right away
      - given: Locked but voted on ended or executed proposals [strict]
        then:
          - when: Trying to unlock [3 strict]
            then:
              - it: Should unlock and refund the full amount right away
      - given: Locked anv voted on currently active proposals [strict]
        then:
          - when: Trying to unlock [4 strict]
            then:
              - it: Should revert

  - given: Flexible mode is set
    and:
      - given: Didn't lock anything [flexible]
        and:
          - when: Trying to unlock [1 flexible]
            then:
              - it: Should do nothing
      - given: Locked but didn't vote anywhere [flexible]
        then:
          - when: Trying to unlock [2 flexible]
            then:
              - it: Should unlock and refund the full amount right away
      - given: Locked but voted on ended or executed proposals [flexible]
        then:
          - when: Trying to unlock [3 flexible]
            then:
              - it: Should unlock and refund the full amount right away
      - given: Locked anv voted on currently active proposals [flexible]
        then:
          - when: Trying to unlock [4 flexible]
            then:
              - it: Should deallocate the existing voting power from active proposals
              - it: Should unlock and refund the full amount

  - given: A proposal has ended
    and:
      - given: Before proposalEnded is called
        then:
          - given: Proposal voter calls unlock [no proposalEnded]
            and:
              - when: Executed proposal
                then:
                  # Slightly redundant, because execute() will trigger proposalEnded()
                  - it: Should allow voters from that proposal to unlock right away
              - when: Defeated proposal
                then:
                  - it: Should allow voters from that proposal to unlock right away
              - when: Active proposal
                then:
                  - it: Should revert
      - when: After proposalEnded is called
        then:
          - when: Proposal voter calls unlock [released]
            then:
              - it: Should allow voters from that proposal to unlock right away
              - it: Should revert on voters who have any other unreleased proposal votes

  - given: Permissions
    then:
      - it: Should revert if proposalEnded is called by an incompatible plugin
